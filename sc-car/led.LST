C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN led.OBJ
COMPILER INVOKED BY: D:\SoftwareInstall\dev\keil\C51\BIN\C51.EXE led.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*-----------------------------------------------
   2            名称：OLED液晶函数库
   3            编写：夏杰
   4            日期：2017.4.22
   5            内容：OLED液晶相关函数、数据
   6          ------------------------------------------------*/
   7          #include "sc.h"
   8          #include <intrins.h>
   9          
  10          // 变量
  11          uchar led_refresh_flag = 0;
  12          
  13          /*****************************************************************************
  14           函 数 名  : LED_WrCmd
  15           功能描述  : 向OLED写命令
  16           输入参数  : UCHAR8 ucCmd  
  17           输出参数  : NONE
  18           返 回 值  : NONE
  19          *****************************************************************************/
  20          void LED_WrCmd(uchar ucCmd)
  21          {
  22   1          uchar i = 8;
  23   1          LED_DC   = 0;
  24   1          LED_SCL  = 0;
  25   1          while (i--)
  26   1          {
  27   2              if (ucCmd & 0x80)
  28   2              {
  29   3                  LED_SDA = 1;
  30   3              }
  31   2              else
  32   2              {
  33   3                  LED_SDA = 0;
  34   3              }
  35   2              LED_SCL = 1;
  36   2              _nop_();           
  37   2              LED_SCL = 0;    
  38   2              ucCmd <<= 1;   
  39   2          }  
  40   1      
  41   1          return;
  42   1      }
  43          
  44          /*****************************************************************************
  45           函 数 名  : LED_WrDat
  46           功能描述  : 向OLED写数据
  47           输入参数  : UCHAR8 ucData  
  48           输出参数  : NONE
  49           返 回 值  : NONE
  50          *****************************************************************************/
  51          void LED_WrDat(uchar ucData)
  52          {
  53   1          uchar i = 8;
  54   1          LED_DC   = 1;
  55   1          LED_SCL  = 0;
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 2   

  56   1          
  57   1          while (i--)
  58   1          {
  59   2              if (ucData & 0x80)
  60   2              {
  61   3                  LED_SDA = 1;
  62   3              }
  63   2              else
  64   2              {
  65   3                  LED_SDA = 0;
  66   3              }
  67   2              
  68   2              LED_SCL = 1; 
  69   2              _nop_();
  70   2              LED_SCL = 0;    
  71   2              ucData <<= 1;    
  72   2          }
  73   1      
  74   1          return;
  75   1      }
  76          
  77          /*****************************************************************************
  78           函 数 名  : LED_SetPos
  79           功能描述  : 设置坐标
  80           输入参数  : UCHAR8 ucIdxX  
  81                       UCHAR8 ucIdxY  
  82           输出参数  : NONE
  83           返 回 值  : NONE
  84          *****************************************************************************/
  85          void LED_SetPos(uchar ucIdxX, uchar ucIdxY)
  86          { 
  87   1          LED_WrCmd(0xb0 + ucIdxY);
  88   1          LED_WrCmd(((ucIdxX & 0xf0) >> 4) | 0x10);
  89   1          LED_WrCmd((ucIdxX & 0x0f) | 0x00); 
  90   1      } 
  91          
  92          
  93          void SetDisplayOnOff(uchar ucData)
  94          {
  95   1          LED_WrCmd(0xAE|ucData); // Set Display On/Off
  96   1                                  // Default => 0xAE
  97   1                                  // 0xAE (0x00) => Display Off
  98   1                                  // 0xAF (0x01) => Display On
  99   1      }
 100          
 101          void SetDisplayClock(uchar ucData)
 102          {
 103   1          LED_WrCmd(0xD5);        // Set Display Clock Divide Ratio / Oscillator Frequency
 104   1          LED_WrCmd(ucData);      // Default => 0x80
 105   1                                  // D[3:0] => Display Clock Divider
 106   1                                  // D[7:4] => Oscillator Frequency
 107   1      }
 108          
 109          void SetMultiplexRatio(uchar ucData)
 110          {
 111   1          LED_WrCmd(0xA8);        // Set Multiplex Ratio
 112   1          LED_WrCmd(ucData);      // Default => 0x3F (1/64 Duty)
 113   1      }
 114          
 115          void SetDisplayOffset(uchar ucData)
 116          {
 117   1          LED_WrCmd(0xD3);        // Set Display Offset
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 3   

 118   1          LED_WrCmd(ucData);      // Default => 0x00
 119   1      }
 120          
 121          void SetStartLine(uchar ucData)
 122          {
 123   1          LED_WrCmd(0x40|ucData); // Set Display Start Line
 124   1                                  // Default => 0x40 (0x00)
 125   1      }
 126          
 127          void SetAddressingMode(uchar ucData)
 128          {
 129   1          LED_WrCmd(0x20);        // Set Memory Addressing Mode
 130   1          LED_WrCmd(ucData);      // Default => 0x02
 131   1                                  // 0x00 => Horizontal Addressing Mode
 132   1                                  // 0x01 => Vertical Addressing Mode
 133   1                                  // 0x02 => Page Addressing Mode
 134   1      }
 135          
 136          void SetChargePump(uchar ucData)
 137          {
 138   1          LED_WrCmd(0x8D);        // Set Charge Pump
 139   1          LED_WrCmd(0x10|ucData); // Default => 0x10
 140   1                                  // 0x10 (0x00) => Disable Charge Pump
 141   1                                  // 0x14 (0x04) => Enable Charge Pump
 142   1      }
 143          
 144          void SetSegmentRemap(uchar ucData)
 145          {
 146   1          LED_WrCmd(0xA0|ucData); // Set Segment Re-Map
 147   1                                  // Default => 0xA0
 148   1                                  // 0xA0 (0x00) => Column Address 0 Mapped to SEG0
 149   1                                  // 0xA1 (0x01) => Column Address 0 Mapped to SEG127
 150   1      }
 151          
 152          void SetCommonRemap(uchar ucData)
 153          {
 154   1          LED_WrCmd(0xC0|ucData); // Set COM Output Scan Direction
 155   1                                  // Default => 0xC0
 156   1                                  // 0xC0 (0x00) => Scan from COM0 to 63
 157   1                                  // 0xC8 (0x08) => Scan from COM63 to 0
 158   1      }
 159          
 160          void SetCommonConfig(uchar ucData)
 161          {
 162   1          LED_WrCmd(0xDA);        // Set COM Pins Hardware Configuration
 163   1          LED_WrCmd(0x02|ucData); // Default => 0x12 (0x10)
 164   1                                  // Alternative COM Pin Configuration
 165   1                                  // Disable COM Left/Right Re-Map
 166   1      }
 167          
 168          void SetContrastControl(uchar ucData)
 169          {
 170   1          LED_WrCmd(0x81);        // Set Contrast Control
 171   1          LED_WrCmd(ucData);      // Default => 0x7F
 172   1      }
 173          
 174          void SetPrechargePeriod(uchar ucData)
 175          {
 176   1          LED_WrCmd(0xD9);        // Set Pre-Charge Period
 177   1          LED_WrCmd(ucData);      // Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
 178   1                                  // D[3:0] => Phase 1 Period in 1~15 Display Clocks
 179   1                                  // D[7:4] => Phase 2 Period in 1~15 Display Clocks
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 4   

 180   1      }
 181          
 182          void SetVCOMH(uchar ucData)
 183          {
 184   1          LED_WrCmd(0xDB);        // Set VCOMH Deselect Level
 185   1          LED_WrCmd(ucData);      // Default => 0x20 (0.77*VCC)
 186   1      }
 187          
 188          void SetEntireDisplay(uchar ucData)
 189          {
 190   1          LED_WrCmd(0xA4|ucData); // Set Entire Display On / Off
 191   1                                  // Default => 0xA4
 192   1                                  // 0xA4 (0x00) => Normal Display
 193   1                                  // 0xA5 (0x01) => Entire Display On
 194   1      }
 195          
 196          void SetInverseDisplay(uchar ucData)
 197          {
 198   1          LED_WrCmd(0xA6|ucData); // Set Inverse Display On/Off
 199   1                                  // Default => 0xA6
 200   1                                  // 0xA6 (0x00) => Normal Display
 201   1                                  // 0xA7 (0x01) => Inverse Display On
 202   1      }
 203          
 204          
 205          /*****************************************************************************
 206           函 数 名  : LED_Fill
 207           功能描述  : 对全屏写入同一个字符函数 
 208                       如 LED_Fill(0x01);    对于某一位0为不亮 1为亮
 209                      ------------------------------------------------------
 210                                          共128列
 211                            1           1                1
 212                        共  0           0                0
 213                        8   0           0                0
 214                        组  0       ……0     …………   0
 215                        字  0           0                0
 216                        符  0           0                0
 217                        即  0           0                0
 218                        8   0           0                0
 219                        页  1           1                1
 220                        64  0           0                0
 221                        行  .           .                .
 222                            .           .    …………    .
 223                            .           .                . 
 224                            .           .                .
 225                            0           0                0
 226                      ------------------------------------------------------
 227           输入参数  : UCHAR8 ucData  
 228           输出参数  : NONE
 229           返 回 值  : NONE
 230          *****************************************************************************/
 231          void LED_Fill(uchar ucData)
 232          {
 233   1          uchar ucPage, ucColumn;
 234   1          
 235   1          for(ucPage = 0; ucPage < 8; ucPage++)
 236   1          {
 237   2              LED_WrCmd(0xb0 + ucPage);  //0xb0+0~7表示页0~7
 238   2              LED_WrCmd(0x00);           //0x00+0~16表示将128列分成16组其地址在某组中的第几列
 239   2              LED_WrCmd(0x10);           //0x10+0~16表示将128列分成16组其地址所在第几组
 240   2              for(ucColumn = 0; ucColumn < 128; ucColumn++)
 241   2              {
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 5   

 242   3                  LED_WrDat(ucData);
 243   3              }
 244   2          }
 245   1      }
 246          
 247          /*-----------------------------------------------
 248            TODO：OLED初始化
 249            参数：
 250            编写：夏杰
 251            日期：2017.4.22
 252          ------------------------------------------------*/
 253          void LED_init()        
 254          {
 255   1          uchar i;
 256   1      
 257   1          LED_SCL = 1;      
 258   1          LED_RST = 0;
 259   1          
 260   1          for(i = 0; i < 100; i++)
 261   1          {
 262   2              _nop_();            //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕      
 263   2          }
 264   1          
 265   1          LED_RST = 1;
 266   1      
 267   1          SetDisplayOnOff(0x00);     // Display Off (0x00/0x01)
 268   1          SetDisplayClock(0x80);     // Set Clock as 100 Frames/Sec
 269   1          SetMultiplexRatio(0x3F);   // 1/64 Duty (0x0F~0x3F)
 270   1          SetDisplayOffset(0x00);    // Shift Mapping RAM Counter (0x00~0x3F)
 271   1          SetStartLine(0x00);        // Set Mapping RAM Display Start Line (0x00~0x3F)
 272   1          SetChargePump(0x04);       // Enable Embedded DC/DC Converter (0x00/0x04)
 273   1          SetAddressingMode(0x02);   // Set Page Addressing Mode (0x00/0x01/0x02)
 274   1          SetSegmentRemap(0x01);     // Set SEG/Column Mapping     0x00左右反置 0x01正常
 275   1          SetCommonRemap(0x08);      // Set COM/Row Scan Direction 0x00上下反置 0x08正常
 276   1          SetCommonConfig(0x10);     // Set Sequential Configuration (0x00/0x10)
 277   1          SetContrastControl(0xCF);  // Set SEG Output Current
 278   1          SetPrechargePeriod(0xF1);  // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 279   1          SetVCOMH(0x40);            // Set VCOM Deselect Level
 280   1          SetEntireDisplay(0x00);    // Disable Entire Display On (0x00/0x01)
 281   1          SetInverseDisplay(0x00);   // Disable Inverse Display On (0x00/0x01)  
 282   1          SetDisplayOnOff(0x01);     // Display On (0x00/0x01)
 283   1          LED_Fill(0x00);            // 初始清屏
 284   1          LED_SetPos(0,0);
 285   1      
 286   1          return;
 287   1      } 
 288          
 289          const uchar code F6x8[][6] =
 290          {
 291              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //sp0
 292              { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !1
 293              { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "2
 294              { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #3
 295              { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $4
 296              { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %5
 297              { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &6
 298              { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '7
 299              { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (8
 300              { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )9
 301              { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *10
 302              { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +11
 303              { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,12
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 6   

 304              { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -13
 305              { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .14
 306              { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /15
 307              { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 016
 308              { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 117
 309              { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 218
 310              { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 319
 311              { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 420
 312              { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 521
 313              { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 622
 314              { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 723
 315              { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 824
 316              { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 925
 317              { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :26
 318              { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;27
 319              { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <28
 320              { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =29
 321              { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >30
 322              { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?31
 323              { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @32
 324              { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A33
 325              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B34
 326              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C35
 327              { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D36
 328              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E37
 329              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F38
 330              { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G39
 331              { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H40
 332              { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I41
 333              { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J42
 334              { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K43
 335              { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L44
 336              { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M45
 337              { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N46
 338              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O47
 339              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P48
 340              { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q49
 341              { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R50
 342              { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S51
 343              { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T52
 344              { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U53
 345              { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V54
 346              { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W55
 347              { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X56
 348              { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y57
 349              { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z58
 350              { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [59
 351              { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20 },   // \60
 352              { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]61
 353              { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^62
 354              { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _63
 355              { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '64
 356              { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a65
 357              { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b66
 358              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c67
 359              { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d68
 360              { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e69
 361              { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f70
 362              { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g71
 363              { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h72
 364              { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i73
 365              { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j74
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 7   

 366              { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k75
 367              { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l76
 368              { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m77
 369              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n78
 370              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o79
 371              { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p80
 372              { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q81
 373              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r82
 374              { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s83
 375              { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t84
 376              { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u85
 377              { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v86
 378              { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w87
 379              { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x88
 380              { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y89
 381              { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z90
 382              { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines91
 383          };
 384          
 385          /*======================================================
 386             128X64OLED液晶底层驱动[8X16]字体库
 387             设计者: Andy
 388             描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
 389             !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 390            ======================================================*/
 391          const uchar code F8X16[]=
 392          {
 393              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
 394              0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
 395              0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
 396              0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
 397              0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
 398              0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
 399              0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
 400              0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
 401              0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
 402              0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
 403              0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
 404              0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
 405              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
 406              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
 407              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
 408              0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
 409              0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
 410              0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
 411              0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
 412              0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
 413              0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
 414              0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
 415              0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
 416              0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
 417              0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
 418              0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
 419              0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
 420              0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
 421              0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
 422              0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
 423              0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
 424              0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
 425              0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
 426              0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
 427              0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 8   

 428              0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
 429              0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
 430              0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
 431              0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
 432              0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
 433              0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
 434              0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
 435              0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
 436              0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
 437              0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
 438              0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
 439              0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
 440              0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
 441              0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
 442              0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
 443              0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
 444              0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
 445              0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
 446              0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
 447              0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
 448              0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
 449              0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
 450              0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
 451              0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
 452              0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
 453              0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
 454              0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
 455              0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
 456              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
 457              0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
 458              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
 459              0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
 460              0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
 461              0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
 462              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
 463              0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
 464              0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
 465              0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
 466              0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
 467              0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
 468              0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
 469              0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
 470              0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
 471              0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
 472              0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
 473              0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
 474              0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
 475              0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
 476              0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
 477              0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
 478              0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
 479              0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
 480              0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
 481              0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
 482              0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
 483              0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
 484              0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
 485              0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
 486              0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
 487              0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
 488          };
 489          
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 9   

 490          /*****************************************************************************
 491           函 数 名  : LED_P8x16Str
 492           功能描述  : 写入一组8x16标准ASCII字符串
 493           输入参数  : uchar ucIdxX       为显示的横坐标0~120
 494                       uchar ucIdxY       为页范围0～3
 495                       uchar ucDataStr[]  要显示的字符串
 496           输出参数  : uchar
 497           返 回 值  : uchar
 498          *****************************************************************************/
 499          void LED_P8x16Str(uchar ucIdxX, uchar ucIdxY, uchar ucDataStr[])
 500          {
 501   1          uchar i, j, ucDataTmp;
 502   1      
 503   1          ucIdxY <<= 1;
 504   1          
 505   1          for (j = 0; ucDataStr[j] != '\0'; j++)
 506   1          {    
 507   2              ucDataTmp = ucDataStr[j] - 32;
 508   2              if(ucIdxX > 120)
 509   2              {
 510   3                  ucIdxX = 0;
 511   3                  ucIdxY += 2;
 512   3              }
 513   2              LED_SetPos(ucIdxX, ucIdxY);   
 514   2              
 515   2              for(i = 0; i < 8; i++) 
 516   2              {
 517   3                  LED_WrDat(F8X16[(ucDataTmp << 4) + i]);
 518   3              }
 519   2              
 520   2              LED_SetPos(ucIdxX, ucIdxY + 1);   
 521   2              
 522   2              for(i = 0; i < 8; i++) 
 523   2              {
 524   3                  LED_WrDat(F8X16[(ucDataTmp << 4) + i + 8]);
 525   3              }
 526   2              ucIdxX += 8;
 527   2              
 528   2          }
 529   1      
 530   1          return;
 531   1      }
 532          
 533          /*****************************************************************************
 534           函 数 名  : LED_P6x8Char
 535           功能描述  : 显示一个6x8标准ASCII字符
 536           输入参数  : UCHAR8 ucIdxX  显示的横坐标0~122
 537                       UCHAR8 ucIdxY  页范围0～7
 538                       UCHAR8 ucData  显示的字符
 539           输出参数  : NONE
 540           返 回 值  : NONE
 541          *****************************************************************************/
 542          void LED_P6x8Char(uchar ucIdxX, uchar ucIdxY, uchar ucData)
 543          {
 544   1          uchar i, ucDataTmp;     
 545   1             
 546   1          ucDataTmp = ucData-32;
 547   1          if(ucIdxX > 122)
 548   1          {
 549   2              ucIdxX = 0;
 550   2              ucIdxY++;
 551   2          }
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 10  

 552   1          
 553   1          LED_SetPos(ucIdxX, ucIdxY);
 554   1          
 555   1          for(i = 0; i < 6; i++)
 556   1          {     
 557   2              LED_WrDat(F6x8[ucDataTmp][i]);  
 558   2          }
 559   1      }
 560          
 561          /*****************************************************************************
 562           函 数 名  : LED_PrintChar
 563           功能描述  : 将一个Char型数转换成3位数进行显示
 564           输入参数  : UCHAR8 ucIdxX    ucIdxX的范围为0～122
 565                       UCHAR8 ucIdxY    ucIdxY的范围为0～7
 566                       CHAR8 cData      cData为需要转化显示的数值 -128~127
 567           输出参数  : none
 568           返 回 值  : none
 569          *****************************************************************************/
 570          void LED_PrintChar(uchar ucIdxX, uchar ucIdxY, char cData)
 571          {
 572   1          uchar i, j, k, usData;
 573   1      
 574   1          if(cData < 0)
 575   1          {
 576   2              LED_P6x8Char(ucIdxX, ucIdxY, '-');
 577   2              usData = (ushort)(-cData);  
 578   2          }
 579   1          else
 580   1          {
 581   2              LED_P6x8Char(ucIdxX, ucIdxY, '+');
 582   2              usData = (ushort)cData;
 583   2          }
 584   1          i = usData / 100;
 585   1          j = (usData % 100) / 10;
 586   1          k = usData % 10;
 587   1          
 588   1          LED_P6x8Char(ucIdxX+6, ucIdxY, i+48);
 589   1          LED_P6x8Char(ucIdxX+12, ucIdxY, j+48);
 590   1          LED_P6x8Char(ucIdxX+18, ucIdxY, k+48);   
 591   1      
 592   1          return;
 593   1      }
 594          
 595          /*-----------------------------------------------
 596            TODO：向OLED写英文字符串
 597            参数：ucIdxX 起始行位置
 598                          ucIdxY 其实列位置
 599                          ucDataStr 字符串头指针
 600            编写：夏杰
 601            日期：2017.4.22
 602          ------------------------------------------------*/
 603          void led_wirte_str(uchar ucIdxX, uchar ucIdxY, uchar ucDataStr[])
 604          {
 605   1              
 606   1              LED_P8x16Str(ucIdxX, ucIdxY, ucDataStr);
 607   1      }
 608          
 609          /*****************************************************************************
 610           函 数 名  : led_write_char
 611           功能描述  : 显示一个6x8标准ASCII字符
 612           输入参数  : uchar ucIdxX  显示的横坐标0~122
 613                       uchar ucIdxY  页范围0～7
C51 COMPILER V9.00   LED                                                                   04/24/2017 16:26:41 PAGE 11  

 614                       uchar ucData  显示的字符
 615           输出参数  : NONE
 616           返 回 值  : NONE
 617          *****************************************************************************/
 618          void led_write_char(uchar ucIdxX, uchar ucIdxY, uchar ucData)
 619          {
 620   1              // 写入字符
 621   1              LED_P6x8Char(ucIdxX, ucIdxY, ucData);   
 622   1      }
 623          
 624          /*****************************************************************************
 625           函 数 名  : LED_PrintChar
 626           功能描述  : 将一个Char型数转换成3位数进行显示
 627           输入参数  : UCHAR8 ucIdxX    ucIdxX的范围为0～122
 628                       UCHAR8 ucIdxY    ucIdxY的范围为0～7
 629                       CHAR8 cData      cData为需要转化显示的数值 -128~127
 630           输出参数  : none
 631           返 回 值  : none
 632          *****************************************************************************/
 633          void led_write_num(uchar ucIdxX, uchar ucIdxY, char cData)
 634          {
 635   1              // 写入数字
 636   1              LED_PrintChar(ucIdxX, ucIdxY, cData);
 637   1      }
 638          
 639          
 640          
 641          
 642          
 643          
 644          
 645          
 646          
 647          
 648          
 649          
 650          
 651          
 652          
 653          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    724    ----
   CONSTANT SIZE    =   2072    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
